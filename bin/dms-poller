#!/usr/bin/ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'cli'
require 'pathname'
require 'dms-poller'

settings = CLI.new do
	switch :debug, :short => :d, :description => "enable debugging"
	options :module_dir, :short => :m, :cast => Pathname, :description => 'path to directory from which poller modules will be loaded', :default => Pathname.new(__FILE__).dirname + '..' + 'module.d'
	option :scheduler_quantum, :short => :q, :cast => Float, :description => 'minimal time between scheduler runs in seconds', :default => 1.0
	option :run_cycles, :short => :c, :cast => Integer, :description => 'run specific number of run cycles and exit (useful for testing)'
	option :time_scale, :short => :s, :cast => Float, :description => 'scale scheduling time, 0.1 is 10x faster (useful for testing)', :default => 1.0
end.parse! do |settings|
	settings.module_dir.each do |m|
		fail "module directory does not exist: #{m}" unless m.directory?
	end

	settings.module_dir = settings.module_dir.map{|m| m.realpath}
end

Logging.logger.root.level = :debug if settings.debug

log.debug settings.inspect

poller_modules = PollerModules.new

settings.module_dir.each do |module_dir|
	poller_modules.load_directory(module_dir)
end

scheduler_thread = SchedulerThread.new(poller_modules, settings.scheduler_quantum, settings.run_cycles, settings.time_scale)

begin
	scheduler_thread.join
rescue Interrupt
	log.info "interrupted, exiting."
	exit(0)
end

log.info "scheduler finished execution, exiting."

