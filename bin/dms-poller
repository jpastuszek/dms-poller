#!/usr/bin/ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'socket'
require 'cli'
require 'pathname'
require 'dms-poller'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

settings = CLI.new do
	description "DMS data collection agent"
	version VERSION
	switch	:debug,						:short => :d, :description => 'enable debugging'
	options :module_dir,				:short => :m, :cast => Pathname, :description => 'path to directory from which poller modules are loaded', :default => Pathname.new(__FILE__).dirname + '..' + 'module.d'
	switch	:startup_run,				:short => :s, :description => 'run all probes on startup (may cause load spike)'
	option	:collector_bind_address,	:short => :b, :description => 'ZeroMQ bind adderss of probe data collection endpoint', :default => 'ipc:///tmp/dms-poller-collector'
	option	:data_processor_address,	:short => :p, :description => 'ZeroMQ adderss of data processor that all collected data will be pushed to', :default => 'tcp://127.0.0.1:12100'
	option	:location,						:short => :l, :description => 'location string', :default => Socket.gethostbyname(Socket.gethostname).first
	option	:process_limit,				:short => :L, :cast => Integer, :description => 'maximum number of scheduler run processes that can run in parallel', :default => 8
	option	:process_time_out,			:short => :o, :cast => Float, :description => 'maximum number of seconds that a scheduler run process can run', :default => 120
	option	:scheduler_quantum,			:short => :q, :cast => Float, :description => 'minimal time between scheduler runs in seconds', :default => 1.0
	option	:runs,						:short => :r, :cast => Integer, :description => 'run specific number of scheduler runs and exit (useful for testing)'
	option	:time_scale,				:short => :t, :cast => Float, :description => 'scheduling time scale - 0.1 is 10x faster (useful for testing)', :default => 1.0
end.parse! do |settings|
	settings.module_dir.each do |m|
		fail "module directory does not exist: #{m}" unless m.directory?
	end

	settings.module_dir = settings.module_dir.map{|m| m.realpath}
end

Logging.logger.root.level = :debug if settings.debug

logging_class_name 'DMSPoller'
log.info "Starting DMS Poller version #{VERSION}; pid #{Process.pid}"

log.debug settings.inspect

poller_modules = PollerModules.new

settings.module_dir.each do |module_dir|
	poller_modules.load_directory(module_dir)
end

log.info "Starting collector thread"
collector_thread = CollectorThread.new(settings.collector_bind_address, settings.data_processor_address, settings.location)

log.info "Starting scheduler thread"
scheduler_thread = SchedulerThread.new(
	poller_modules, 
	settings.collector_bind_address,
	settings.scheduler_quantum * settings.time_scale, 
	settings.time_scale, 
	settings.runs, 
	settings.startup_run, 
	settings.process_limit,
	settings.process_time_out
)

log.info "DMS Poller ready"

begin
	scheduler_thread.join
rescue Interrupt
	log.info "interrupted, shutting down..."
end

collector_thread.terminate
collector_thread.join

log.info "dms-poller done"

